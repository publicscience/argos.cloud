{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "Creates a highly-available RDS DBInstance of PostgreSQL with metric alarms for the health of the database.",

  "Parameters": {
    "DBName": {
      "Default": "MyDatabase",
      "Description" : "The database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z_][a-zA-Z0-9_]*",
      "ConstraintDescription" : "must begin with a letter or underscore and contain only alphanumeric characters or underscores."
    },
    "DBUser": {
      "NoEcho": "true",
      "Description" : "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z_][a-zA-Z0-9_]*",
      "ConstraintDescription" : "must begin with a letter or underscore and contain only alphanumeric characters or underscores."
    },
    "DBPassword": {
      "NoEcho": "true",
      "Description" : "The database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },
    "DBAllocatedStorage": {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024Gb."
    },
    "DBInstanceClass": {
      "Default": "db.m1.small",
      "Description" : "The database instance type",
      "Type": "String",
      "AllowedValues" : [ "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },
    "EC2SecurityGroup": {
      "Default": "default",
      "Description" : "The EC2 security group that contains instances that need access to the database",
      "Type": "String"
    },
    "MultiAZ": {
      "Default": "true",
      "Description" : "Create a multi-AZ RDS database instance",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },
    "DatabaseGroup": {
        "Description": "The group tag to apply to the instance.",
        "Type": "String",
        "Default": "database"
    }
  },

  "Mappings" : {
    "InstanceTypeMap" : {
      "db.m1.small" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      },
      "db.m1.large" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      },
      "db.m1.xlarge" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      },
      "db.m2.xlarge" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      },
      "db.m2.2xlarge" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      },
      "db.m2.4xlarge" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      }
    }
  },

  "Resources" : {

    "MyDB" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "DBName" : { "Ref" : "DBName" },
        "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
        "DBInstanceClass" : { "Ref" : "DBInstanceClass" },
        "Engine" : "postgres",
        "DBSecurityGroups": [ { "Ref": "DBSecurityGroup" } ],
        "MasterUsername" : { "Ref" : "DBUser" },
        "MasterUserPassword" : { "Ref" : "DBPassword" },
        "MultiAZ" : { "Ref" : "MultiAZ" }
        "Tags": [
            { "Key": "Name", "Value": { "Fn::Join": [ "-", [
                { "Ref": "AppName" },
                { "Ref": "EnvironmentName" },
                { "Ref": "DatabaseGroup" }
            ]]}},
            { "Key": "Group", "Value": { "Ref": "DatabaseGroup" }},
            { "Key": "Env", "Value": { "Ref": "EnvironmentName" } },
            { "Key": "App", "Value": { "Ref": "AppName" } }
        ]
      },
      "DeletionPolicy" : "Snapshot"
    },

    "AlarmTopic" : {
       "Type" : "AWS::SNS::Topic"
    },

    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "DBSecurityGroupIngress": {
          "EC2SecurityGroupName": { "Ref": "EC2SecurityGroup" }
        },
        "GroupDescription": "database access"
      }
    },

    "DBCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " CPU > ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBInstanceClass" }, "CPULimit" ]}, "% for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "CPUUtilization",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBInstanceClass" }, "CPULimit" ]},
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MyDB" }
        }]
      }
    },
    "FreeStorageSpace": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " storage space <= ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBInstanceClass" }, "FreeStorageSpaceLimit" ]}, " for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "FreeStorageSpace",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBInstanceClass" }, "FreeStorageSpaceLimit" ]},
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MyDB" }
        }]
      }
    },
    "ReadIOPSHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " WriteIOPs > ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBInstanceClass" }, "ReadIOPSLimit" ]}, " for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "ReadIOPS",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBInstanceClass" }, "ReadIOPSLimit" ]},
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MyDB" }
        }]
      }
    },
    "WriteIOPSHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " WriteIOPs > ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBInstanceClass" }, "WriteIOPSLimit" ]}, " for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "WriteIOPS",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBInstanceClass" }, "WriteIOPSLimit" ]},
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MyDB" }
        }]
      }
    }
  },

  "Outputs" : {
    "DBAddress" : {
      "Description" : "Address of database endpoint",
      "Value" : { "Fn::GetAtt": [ "MyDB", "Endpoint.Address" ] }
    },
    "DBPort" : {
      "Description" : "Database endpoint port number",
      "Value" : { "Fn::GetAtt": [ "MyDB", "Endpoint.Port" ] }
    }
  }
}
